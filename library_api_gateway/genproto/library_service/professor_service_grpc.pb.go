// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: professor_service.proto

package library_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfessorServiceClient is the client API for ProfessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfessorServiceClient interface {
	Create(ctx context.Context, in *Professor, opts ...grpc.CallOption) (*Msg, error)
	Get(ctx context.Context, in *GetProfessor, opts ...grpc.CallOption) (*Professor, error)
	GetAll(ctx context.Context, in *GetAllProfessorRequest, opts ...grpc.CallOption) (*GetAllProfessorResponse, error)
	Update(ctx context.Context, in *Professor, opts ...grpc.CallOption) (*Msg, error)
	Delete(ctx context.Context, in *GetProfessor, opts ...grpc.CallOption) (*Msg, error)
}

type professorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfessorServiceClient(cc grpc.ClientConnInterface) ProfessorServiceClient {
	return &professorServiceClient{cc}
}

func (c *professorServiceClient) Create(ctx context.Context, in *Professor, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.ProfessorService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professorServiceClient) Get(ctx context.Context, in *GetProfessor, opts ...grpc.CallOption) (*Professor, error) {
	out := new(Professor)
	err := c.cc.Invoke(ctx, "/genproto.ProfessorService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professorServiceClient) GetAll(ctx context.Context, in *GetAllProfessorRequest, opts ...grpc.CallOption) (*GetAllProfessorResponse, error) {
	out := new(GetAllProfessorResponse)
	err := c.cc.Invoke(ctx, "/genproto.ProfessorService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professorServiceClient) Update(ctx context.Context, in *Professor, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.ProfessorService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *professorServiceClient) Delete(ctx context.Context, in *GetProfessor, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.ProfessorService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfessorServiceServer is the server API for ProfessorService service.
// All implementations must embed UnimplementedProfessorServiceServer
// for forward compatibility
type ProfessorServiceServer interface {
	Create(context.Context, *Professor) (*Msg, error)
	Get(context.Context, *GetProfessor) (*Professor, error)
	GetAll(context.Context, *GetAllProfessorRequest) (*GetAllProfessorResponse, error)
	Update(context.Context, *Professor) (*Msg, error)
	Delete(context.Context, *GetProfessor) (*Msg, error)
	mustEmbedUnimplementedProfessorServiceServer()
}

// UnimplementedProfessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfessorServiceServer struct {
}

func (UnimplementedProfessorServiceServer) Create(context.Context, *Professor) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProfessorServiceServer) Get(context.Context, *GetProfessor) (*Professor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProfessorServiceServer) GetAll(context.Context, *GetAllProfessorRequest) (*GetAllProfessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedProfessorServiceServer) Update(context.Context, *Professor) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedProfessorServiceServer) Delete(context.Context, *GetProfessor) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProfessorServiceServer) mustEmbedUnimplementedProfessorServiceServer() {}

// UnsafeProfessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfessorServiceServer will
// result in compilation errors.
type UnsafeProfessorServiceServer interface {
	mustEmbedUnimplementedProfessorServiceServer()
}

func RegisterProfessorServiceServer(s grpc.ServiceRegistrar, srv ProfessorServiceServer) {
	s.RegisterService(&ProfessorService_ServiceDesc, srv)
}

func _ProfessorService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Professor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProfessorService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorServiceServer).Create(ctx, req.(*Professor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessorService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfessor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProfessorService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorServiceServer).Get(ctx, req.(*GetProfessor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessorService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProfessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProfessorService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorServiceServer).GetAll(ctx, req.(*GetAllProfessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessorService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Professor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProfessorService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorServiceServer).Update(ctx, req.(*Professor))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfessorService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfessor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfessorServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProfessorService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfessorServiceServer).Delete(ctx, req.(*GetProfessor))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfessorService_ServiceDesc is the grpc.ServiceDesc for ProfessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ProfessorService",
	HandlerType: (*ProfessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProfessorService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ProfessorService_Get_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _ProfessorService_GetAll_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfessorService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProfessorService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "professor_service.proto",
}
