// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: probooklist_service.proto

package library_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProBookListServiceClient is the client API for ProBookListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProBookListServiceClient interface {
	Create(ctx context.Context, in *ProBookList, opts ...grpc.CallOption) (*Msg, error)
	GetAllProfessor(ctx context.Context, in *GetAllProfessorLibraryRequest, opts ...grpc.CallOption) (*GetAllProfessorLibraryResponse, error)
	GetProfessor(ctx context.Context, in *GetProfessorLibrary, opts ...grpc.CallOption) (*GetProfessorLibraryInfo, error)
	Return(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*Msg, error)
}

type proBookListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProBookListServiceClient(cc grpc.ClientConnInterface) ProBookListServiceClient {
	return &proBookListServiceClient{cc}
}

func (c *proBookListServiceClient) Create(ctx context.Context, in *ProBookList, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.ProBookListService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proBookListServiceClient) GetAllProfessor(ctx context.Context, in *GetAllProfessorLibraryRequest, opts ...grpc.CallOption) (*GetAllProfessorLibraryResponse, error) {
	out := new(GetAllProfessorLibraryResponse)
	err := c.cc.Invoke(ctx, "/genproto.ProBookListService/GetAllProfessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proBookListServiceClient) GetProfessor(ctx context.Context, in *GetProfessorLibrary, opts ...grpc.CallOption) (*GetProfessorLibraryInfo, error) {
	out := new(GetProfessorLibraryInfo)
	err := c.cc.Invoke(ctx, "/genproto.ProBookListService/GetProfessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proBookListServiceClient) Return(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.ProBookListService/Return", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProBookListServiceServer is the server API for ProBookListService service.
// All implementations must embed UnimplementedProBookListServiceServer
// for forward compatibility
type ProBookListServiceServer interface {
	Create(context.Context, *ProBookList) (*Msg, error)
	GetAllProfessor(context.Context, *GetAllProfessorLibraryRequest) (*GetAllProfessorLibraryResponse, error)
	GetProfessor(context.Context, *GetProfessorLibrary) (*GetProfessorLibraryInfo, error)
	Return(context.Context, *ReturnBook) (*Msg, error)
	mustEmbedUnimplementedProBookListServiceServer()
}

// UnimplementedProBookListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProBookListServiceServer struct {
}

func (UnimplementedProBookListServiceServer) Create(context.Context, *ProBookList) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedProBookListServiceServer) GetAllProfessor(context.Context, *GetAllProfessorLibraryRequest) (*GetAllProfessorLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProfessor not implemented")
}
func (UnimplementedProBookListServiceServer) GetProfessor(context.Context, *GetProfessorLibrary) (*GetProfessorLibraryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfessor not implemented")
}
func (UnimplementedProBookListServiceServer) Return(context.Context, *ReturnBook) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Return not implemented")
}
func (UnimplementedProBookListServiceServer) mustEmbedUnimplementedProBookListServiceServer() {}

// UnsafeProBookListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProBookListServiceServer will
// result in compilation errors.
type UnsafeProBookListServiceServer interface {
	mustEmbedUnimplementedProBookListServiceServer()
}

func RegisterProBookListServiceServer(s grpc.ServiceRegistrar, srv ProBookListServiceServer) {
	s.RegisterService(&ProBookListService_ServiceDesc, srv)
}

func _ProBookListService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProBookList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProBookListServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProBookListService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProBookListServiceServer).Create(ctx, req.(*ProBookList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProBookListService_GetAllProfessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProfessorLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProBookListServiceServer).GetAllProfessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProBookListService/GetAllProfessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProBookListServiceServer).GetAllProfessor(ctx, req.(*GetAllProfessorLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProBookListService_GetProfessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfessorLibrary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProBookListServiceServer).GetProfessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProBookListService/GetProfessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProBookListServiceServer).GetProfessor(ctx, req.(*GetProfessorLibrary))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProBookListService_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProBookListServiceServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.ProBookListService/Return",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProBookListServiceServer).Return(ctx, req.(*ReturnBook))
	}
	return interceptor(ctx, in, info, handler)
}

// ProBookListService_ServiceDesc is the grpc.ServiceDesc for ProBookListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProBookListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.ProBookListService",
	HandlerType: (*ProBookListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ProBookListService_Create_Handler,
		},
		{
			MethodName: "GetAllProfessor",
			Handler:    _ProBookListService_GetAllProfessor_Handler,
		},
		{
			MethodName: "GetProfessor",
			Handler:    _ProBookListService_GetProfessor_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _ProBookListService_Return_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "probooklist_service.proto",
}
