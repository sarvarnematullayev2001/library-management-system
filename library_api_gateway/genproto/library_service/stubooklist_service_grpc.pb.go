// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: stubooklist_service.proto

package library_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StuBookListServiceClient is the client API for StuBookListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StuBookListServiceClient interface {
	Create(ctx context.Context, in *StuBookList, opts ...grpc.CallOption) (*Msg, error)
	GetAllStudent(ctx context.Context, in *GetAllStudentLibraryRequest, opts ...grpc.CallOption) (*GetAllStudentLibraryResponse, error)
	GetStudent(ctx context.Context, in *GetStudentLibrary, opts ...grpc.CallOption) (*GetStudentLibraryInfo, error)
	Return(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*Msg, error)
}

type stuBookListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStuBookListServiceClient(cc grpc.ClientConnInterface) StuBookListServiceClient {
	return &stuBookListServiceClient{cc}
}

func (c *stuBookListServiceClient) Create(ctx context.Context, in *StuBookList, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.StuBookListService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuBookListServiceClient) GetAllStudent(ctx context.Context, in *GetAllStudentLibraryRequest, opts ...grpc.CallOption) (*GetAllStudentLibraryResponse, error) {
	out := new(GetAllStudentLibraryResponse)
	err := c.cc.Invoke(ctx, "/genproto.StuBookListService/GetAllStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuBookListServiceClient) GetStudent(ctx context.Context, in *GetStudentLibrary, opts ...grpc.CallOption) (*GetStudentLibraryInfo, error) {
	out := new(GetStudentLibraryInfo)
	err := c.cc.Invoke(ctx, "/genproto.StuBookListService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stuBookListServiceClient) Return(ctx context.Context, in *ReturnBook, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/genproto.StuBookListService/Return", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StuBookListServiceServer is the server API for StuBookListService service.
// All implementations must embed UnimplementedStuBookListServiceServer
// for forward compatibility
type StuBookListServiceServer interface {
	Create(context.Context, *StuBookList) (*Msg, error)
	GetAllStudent(context.Context, *GetAllStudentLibraryRequest) (*GetAllStudentLibraryResponse, error)
	GetStudent(context.Context, *GetStudentLibrary) (*GetStudentLibraryInfo, error)
	Return(context.Context, *ReturnBook) (*Msg, error)
	mustEmbedUnimplementedStuBookListServiceServer()
}

// UnimplementedStuBookListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStuBookListServiceServer struct {
}

func (UnimplementedStuBookListServiceServer) Create(context.Context, *StuBookList) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStuBookListServiceServer) GetAllStudent(context.Context, *GetAllStudentLibraryRequest) (*GetAllStudentLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudent not implemented")
}
func (UnimplementedStuBookListServiceServer) GetStudent(context.Context, *GetStudentLibrary) (*GetStudentLibraryInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStuBookListServiceServer) Return(context.Context, *ReturnBook) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Return not implemented")
}
func (UnimplementedStuBookListServiceServer) mustEmbedUnimplementedStuBookListServiceServer() {}

// UnsafeStuBookListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StuBookListServiceServer will
// result in compilation errors.
type UnsafeStuBookListServiceServer interface {
	mustEmbedUnimplementedStuBookListServiceServer()
}

func RegisterStuBookListServiceServer(s grpc.ServiceRegistrar, srv StuBookListServiceServer) {
	s.RegisterService(&StuBookListService_ServiceDesc, srv)
}

func _StuBookListService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StuBookList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuBookListServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.StuBookListService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuBookListServiceServer).Create(ctx, req.(*StuBookList))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuBookListService_GetAllStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudentLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuBookListServiceServer).GetAllStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.StuBookListService/GetAllStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuBookListServiceServer).GetAllStudent(ctx, req.(*GetAllStudentLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuBookListService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentLibrary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuBookListServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.StuBookListService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuBookListServiceServer).GetStudent(ctx, req.(*GetStudentLibrary))
	}
	return interceptor(ctx, in, info, handler)
}

func _StuBookListService_Return_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnBook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StuBookListServiceServer).Return(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/genproto.StuBookListService/Return",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StuBookListServiceServer).Return(ctx, req.(*ReturnBook))
	}
	return interceptor(ctx, in, info, handler)
}

// StuBookListService_ServiceDesc is the grpc.ServiceDesc for StuBookListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StuBookListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "genproto.StuBookListService",
	HandlerType: (*StuBookListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StuBookListService_Create_Handler,
		},
		{
			MethodName: "GetAllStudent",
			Handler:    _StuBookListService_GetAllStudent_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _StuBookListService_GetStudent_Handler,
		},
		{
			MethodName: "Return",
			Handler:    _StuBookListService_Return_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stubooklist_service.proto",
}
